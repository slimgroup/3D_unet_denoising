# -*- coding: utf-8 -*-
"""image_impeccable_starter_notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/thinkonward/challenges/blob/main/geoscience/image-impeccable/image-impeccable-starter-notebook/image_impeccable_starter_notebook.ipynb

# Image Impeccable: Journey to Clarity - Starter Notebook

Welcome to the Image Impeccable Challenge. Your mission, if you choose to accept it, is to build a deep learning model that ingests 3D seismic volumes with noise and returns a 3D volume free of noise. Please see the [challenge page](https://thinkonward.com/app/c/challenges) for more details about the rules and requirements.

### Supplied Materials:

* Starter Notebook
* Training data: 250 noisy and denoised synthetic 3D seismic volume pairs
* Test data: 15 noisy 3D seismic volumes
* `utils.py` script containing helpful functions (optional)
* `requirements.txt` for all required packages

### Imports
"""

import os
import subprocess
#import torch
import zipfile
# Create directories where the data is stored
directories = ["training_data", "test_data", "submission_files"]
for directory in directories:
    if not os.path.exists(directory):
        os.makedirs(directory)

#device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# List of URLs for training data
training_urls = [
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part1.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part2.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part3.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part4.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part5.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part6.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part7.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part8.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part9.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part10.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part11.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part12.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part13.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part14.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part15.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part16.zip",
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-train-data-part17.zip"
]

# List of URLs for test data
test_urls = [
    "https://xeek-public-287031953319-eb80.s3.amazonaws.com/image-impeccable/image-impeccable-test-data.zip"
]

# Function to download files using wget
def download_files(urls, output_directory):
    for url in urls:
        subprocess.run(["wget", url, "-P", output_directory], check=True)

## Download training data
download_files(training_urls, "./training_data/")
#
### Download test data
download_files(test_urls, "./test_data/")

# Unzip downloaded files into corresponding directories
def unzip_files(directory):
    for filename in os.listdir(directory):
        if filename.endswith(".zip"):
            file_path = os.path.join(directory, filename)
            # Create a directory with the name of the zip file (without the .zip extension)
            extract_dir = os.path.join(directory, os.path.splitext(filename)[0])
            os.makedirs(extract_dir, exist_ok=True)
            # Extract all contents into the corresponding directory
            with zipfile.ZipFile(file_path, 'r') as zip_ref:
                zip_ref.extractall(extract_dir)
            os.remove(file_path)  # Optionally remove the zip file after extraction

# Unzip training and test data
unzip_files("./training_data/")
unzip_files("./test_data/")
"""You have been provided with 250 paired synthetic seismic datasets. There are 500 total volumes, 250 volumes are the noisy seismic, and 250 volumes are the target denoised seismic. The synthetic data is delivered as Numpy arrays with a shape of `(1259,300,300)`.  You are free to use any inline or crosslines from the volumes that you choose for training. The output of your model must be the same shaped volumes as those provided, `(1259,300,300)`. The test dataset will contain 15 noisy seismic volumes of the same shape as the training dataset.

Enough reading, go ahead and load up some seismic data with the cells below and take a look at what we are talking about!
"""
